"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[6677],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(d,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9753:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"Modals",description:"Discord modals (forms) in Pycord"},d=void 0,c={unversionedId:"pycord-examples/discord-ui/modals",id:"pycord-examples/discord-ui/modals",title:"Modals",description:"Discord modals (forms) in Pycord",source:"@site/docs/pycord-examples/discord-ui/modals.md",sourceDirName:"pycord-examples/discord-ui",slug:"/pycord-examples/discord-ui/modals",permalink:"/pycord-examples/discord-ui/modals",draft:!1,tags:[],version:"current",frontMatter:{title:"Modals",description:"Discord modals (forms) in Pycord"},sidebar:"defaultSidebar",previous:{title:"Buttons",permalink:"/pycord-examples/discord-ui/buttons"},next:{title:"Selects",permalink:"/pycord-examples/discord-ui/selects"}},s={},u=[],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"I recommend ",(0,i.kt)("a",{parentName:"p",href:"../subclassing"},"subclassing")," here!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main.py"',title:'"main.py"'},"class MyModal(discord.ui.Modal):\n  def __init__(self):\n    super().__init__(title='Modal Title') # You MUST include a title!\n    self.add_item(discord.ui.InputText(label='Long input', style=discord.InputTextStyle.long))\n    self.add_item(discord.ui.InputText(label='Short input', style=discord.InputTextStyle.short))\n  async def callback(self, interaction):\n    embed = discord.Embed(color=discord.Colour.blurple())\n    for child in self.children:\n      embed.add_field(name=child.label, value=child.value) # this will add an embed field for every input given in the modal\n    await interaction.response.send_message(embed=embed, ephemeral=True)\n\n@client.slash_command(name=\"modal\")\nasync def modal(ctx):\n  MODAL = MyModal()\n  await ctx.interaction.response.send_modal(MODAL) # you *CAN NOT* send a modal in `ctx.respond`\n")),(0,i.kt)("div",{className:"box blurple no-background"},(0,i.kt)("div",{className:"title"},"Helpful Documentation"),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.ui.Modal",className:"discord-link"},"Modal Documentation")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.InteractionResponse.send_modal",className:"discord-link"},(0,i.kt)("span",{className:"timestamp"},".send_modal")," Documentation")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.ui.InputText",className:"discord-link"},"Text Input Documentation")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.InputTextStyle",className:"discord-link"},"Text Input Style Documentation"))))}m.isMDXComponent=!0}}]);