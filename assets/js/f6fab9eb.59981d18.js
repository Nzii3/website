"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[628],{4629:function(e,t,n){var i=n(7294),o=n(9960);t.Z=function(e){var t=e.type,n=e.label,s=e.icon,a=e.link,r=e.isDisabled,c=e.onClick,d=e.children,l=function(e){var t=[];return e.split(" ").forEach((function(e){t.push("pyc-button--"+e)})),t.join(" ")},u=i.createElement("button",{className:"pyc-button"+(t?" "+l(t):""),"aria-label":n||(null==d?void 0:d.toString()),disabled:r,onClick:c},s&&i.createElement("i",{className:"pyc-button__icon","aria-hidden":"true"},s),d&&i.createElement("span",{className:"pyc-button__label"},d));return a?i.createElement(o.Z,{className:"pyc-button"+(t?" "+l(t):""),"aria-label":n||(null==d?void 0:d.toString()),href:a},s&&i.createElement("i",{className:"pyc-button__icon","aria-hidden":"true"},s),d&&i.createElement("span",{className:"pyc-button__label"},d)):u}},4567:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return u}});var i=n(7462),o=n(3366),s=(n(7294),n(3905)),a=(n(4629),n(7674),["components"]),r={title:"Buttons",description:"Discord buttons in Pycord"},c=void 0,d={unversionedId:"pycord-examples/discord-ui/buttons",id:"pycord-examples/discord-ui/buttons",title:"Buttons",description:"Discord buttons in Pycord",source:"@site/docs/pycord-examples/discord-ui/buttons.md",sourceDirName:"pycord-examples/discord-ui",slug:"/pycord-examples/discord-ui/buttons",permalink:"/pycord-examples/discord-ui/buttons",draft:!1,tags:[],version:"current",frontMatter:{title:"Buttons",description:"Discord buttons in Pycord"},sidebar:"defaultSidebar",previous:{title:"Discord UI",permalink:"/category/discord-ui"},next:{title:"Selects",permalink:"/pycord-examples/discord-ui/selects"}},l={},u=[],m={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"I recommend ",(0,s.kt)("a",{parentName:"p",href:"../subclassing"},"subclassing")," here!"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Credit: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Pycord-Development/pycord/blob/master/examples/views/confirm.py"},"https://github.com/Pycord-Development/pycord/blob/master/examples/views/confirm.py"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'import discord\nfrom discord.ext import commands\n\nclass Confirm(discord.ui.View):\n  def __init__(self, author: discord.User):\n    self.author = author # this is what you will set when defining the view in your other code: this user object that is the person that invoked the command or event and that person will be the only one confirming/canceling\n    super().__init__(timeout=30) # you can edit this to whatever you want in SECONDS\n    self.value = None\n    # AND THEN YOU CAN DO:\n    # view = Confirm(author=myauthorobject)\n    # await view.wait()\n    # if view.value == "Yes":\n    # (do something)\n    # if view.value == "No":\n    # (do something)\n\n    async def on_timeout(self): # if you don\'t want this, remove it. you will need to do `view.message = myMessageObject` after doing view = Confirm(author=myauthorobject)\n      for child in self.children:\n        child.disabled = True # making all the components on the message disabled\n      await self.message.edit(content="Timeout exceeded!", view=self) # if you want, you can pass in \'embed=None\' to make sure that the message edits itself with no embed.\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool: # you have to retuen this as a bool object or it wont work\n      if interaction.user != self.author: # accessing the discord.User object we set earlier\n        await interaction.response.send_message("This is not for you.", ephemeral=True)\n        return False\n      else:\n        return True\n\n    @discord.ui.button(label="Yes", style=discord.ButtonStyle.green)\n    async def confirm(self, button, interaction):\n      for child in self.children:\n        child.disabled = True\n      self.value = "Yes"\n      self.stop()\n\n    @discord.ui.button(label="No", style=discord.ButtonStyle.red)\n    async def cancel(self, button, interaction):\n      for child in self.children:\n        child.disabled = True\n      self.value = "No"\n      self.stop()\n    \n\n# somewhere else\n\nclass MyCog(commands.Cog):\n  def __init__(self, bot):\n    self.bot = bot\n  \n  @commands.command()\n  async def confirm(self, ctx):\n    view = Confirm(author=ctx.author) # defining view and setting author\n    message = await ctx.send("Would you like to confirm?", view=view)\n    view.message = message\n    await view.wait()\n    if view.value == "Yes":\n      await view.message.edit(content=f"You confirmed with {view.value}!", view=view) # we edit view to view because the buttons have been disabled in the class when the user clicks a button\n    if view.value == "No":\n      await view.message.edit(content=f"You canceled with {view.value}!", view=view)\n\ndef setup(bot):\n  bot.add_cog(MyCog(bot))\n\n')))}f.isMDXComponent=!0}}]);