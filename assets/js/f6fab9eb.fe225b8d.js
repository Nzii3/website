"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[8628],{8624:function(e,t,o){o.d(t,{v:function(){return s}});var n=o(7294),i=o(7674),s=Object.assign({},i.TW,{profiles:{nziie:{author:"vNziie--",avatar:"/img/logo.png",roleColor:"#00ffff"},moltensutilities:{author:"Molten's Utilities",avatar:"/img/moltensutilities.png",roleColor:"#5865f2",bot:!0},moltensupport:{author:"Molten Support",avatar:"/img/moltensupport.png",roleColor:"#ff0000",bot:!0},member:{author:"Member",avatar:"blue"},modmail:{author:"Modmail",avatar:"red",bot:!0},wumpus:{author:"Wumpus",avatar:"/img/wumpus.png"},bot:{author:"Bot",avatar:"blue",bot:!0},wumpusmanager:{author:"Wumpus Manager",avatar:"/img/wumpusmanager.PNG",bot:!0,roleColor:"#5865f2"}}});t.Z=function(e){var t=e.options,o=void 0===t?s:t,r=e.children;return n.createElement(i.qs.Provider,{value:o},n.createElement(i.dZ,null,r))}},4567:function(e,t,o){o.r(t),o.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=o(7462),i=o(3366),s=(o(7294),o(3905)),r=o(7674),a=o(8624),d=["components"],l={title:"Buttons",description:"Discord buttons in Pycord"},u=void 0,c={unversionedId:"pycord-examples/discord-ui/buttons",id:"pycord-examples/discord-ui/buttons",title:"Buttons",description:"Discord buttons in Pycord",source:"@site/docs/pycord-examples/discord-ui/buttons.md",sourceDirName:"pycord-examples/discord-ui",slug:"/pycord-examples/discord-ui/buttons",permalink:"/pycord-examples/discord-ui/buttons",draft:!1,tags:[],version:"current",frontMatter:{title:"Buttons",description:"Discord buttons in Pycord"},sidebar:"defaultSidebar",previous:{title:"Discord UI",permalink:"/category/discord-ui"},next:{title:"Modals",permalink:"/pycord-examples/discord-ui/modals"}},m={},p=[{value:"Output",id:"output",level:2}],f={toc:p};function h(e){var t=e.components,o=(0,i.Z)(e,d);return(0,s.kt)("wrapper",(0,n.Z)({},f,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"I recommend ",(0,s.kt)("a",{parentName:"p",href:"../subclassing"},"subclassing")," here!"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Credit: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Pycord-Development/pycord/blob/master/examples/views/confirm.py"},"https://github.com/Pycord-Development/pycord/blob/master/examples/views/confirm.py"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'import discord\nfrom discord.ext import commands\n\nclass Confirm(discord.ui.View):\n  def __init__(self, author: discord.User):\n    self.author = author # this is what you will set when defining the view in your other code: this user object that is the person that invoked the command or event and that person will be the only one confirming/canceling\n    super().__init__(timeout=30) # you can edit this to whatever you want in SECONDS\n    self.value = None\n    # AND THEN YOU CAN DO:\n    # view = Confirm(author=myauthorobject)\n    # await view.wait()\n    # if view.value == "Yes":\n    # (do something)\n    # if view.value == "No":\n    # (do something)\n\n    async def on_timeout(self): # if you don\'t want this, remove it. you will need to do `view.message = myMessageObject` after doing view = Confirm(author=myauthorobject)\n      for child in self.children:\n        child.disabled = True # making all the components on the message disabled\n      await self.message.edit(content="Timeout exceeded!", view=self) # if you want, you can pass in \'embed=None\' to make sure that the message edits itself with no embed.\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool: # you have to retuen this as a bool object or it wont work\n      if interaction.user != self.author: # accessing the discord.User object we set earlier\n        await interaction.response.send_message("This is not for you.", ephemeral=True)\n        return False\n      else:\n        return True\n\n    @discord.ui.button(label="Yes", style=discord.ButtonStyle.green)\n    async def confirm(self, button, interaction):\n      self.disable_all_items()\n      self.value = "Yes"\n      self.stop()\n\n    @discord.ui.button(label="No", style=discord.ButtonStyle.red)\n    async def cancel(self, button, interaction):\n      self.disable_all_items()\n      self.value = "No"\n      self.stop()\n    \n\n# somewhere else\n\nclass MyCog(commands.Cog):\n  def __init__(self, bot):\n    self.bot = bot\n  \n  @commands.command()\n  async def confirm(self, ctx):\n    view = Confirm(author=ctx.author) # defining view and setting author\n    message = await ctx.send("Would you like to confirm?", view=view)\n    view.message = message\n    await view.wait()\n    if view.value == "Yes":\n      await view.message.edit(content=f"You confirmed with {view.value}!", view=view) # we edit view to view because the buttons have been disabled in the class when the user clicks a button\n    if view.value == "No":\n      await view.message.edit(content=f"You canceled with {view.value}!", view=view)\n\ndef setup(bot):\n  bot.add_cog(MyCog(bot))\n\n')),(0,s.kt)("h2",{id:"output"},"Output"),(0,s.kt)(a.Z,{mdxType:"DiscordComponent"},(0,s.kt)(r.kK,{profile:"nziie",mdxType:"DiscordMessage"},"!confirm"),(0,s.kt)(r.kK,{profile:"bot",mdxType:"DiscordMessage"},"Would you like to confirm?",(0,s.kt)("div",{slot:"actions"},(0,s.kt)(r.jr,{mdxType:"DiscordButtons"},(0,s.kt)(r.qD,{type:"success",mdxType:"DiscordButton"},"Yes"),(0,s.kt)(r.qD,{type:"danger",mdxType:"DiscordButton"},"No"))))),(0,s.kt)("br",null),(0,s.kt)("span",{className:"timestamp"},"When 'Yes' is clicked..."),(0,s.kt)("br",null),(0,s.kt)("br",null),(0,s.kt)(a.Z,{mdxType:"DiscordComponent"},(0,s.kt)(r.kK,{profile:"nziie",mdxType:"DiscordMessage"},"!confirm"),(0,s.kt)(r.kK,{profile:"bot",edited:!0,mdxType:"DiscordMessage"},"You confirmed with Yes!",(0,s.kt)("div",{slot:"actions"},(0,s.kt)(r.jr,{mdxType:"DiscordButtons"},(0,s.kt)(r.qD,{type:"success",disabled:!0,mdxType:"DiscordButton"},"Yes"),(0,s.kt)(r.qD,{type:"danger",disabled:!0,mdxType:"DiscordButton"},"No"))))),(0,s.kt)("br",null),(0,s.kt)("div",{className:"box blurple no-background"},(0,s.kt)("div",{className:"title"},"Helpful Documentation"),(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.ui.Button",className:"discord-link"},"Button Documentation")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.ui.View",className:"discord-link"},"View Documentation")),(0,s.kt)("li",null,(0,s.kt)("a",{href:"https://docs.pycord.dev/en/master/api.html#discord.ButtonStyle",className:"discord-link"},"Button Style Documentation"))))}h.isMDXComponent=!0}}]);